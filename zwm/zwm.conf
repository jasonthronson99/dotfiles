; ----------- ZWM Configuration File -------------

; AUTOSTART APPLICATIONS
exec = ["polybar", "-c", ".config/polybar/config.ini"]
exec = "nm-applet"
exec = "lxqt-powermanagement"
exec = "megasync"
exec = "volumeicon"
exec = "parcellite"
exec = ["picom", "-b"]
exec = ["feh", "--bg-fill", "MEGA/Pictures/wall2.jpg"]

; AVAILABLE VARIABLES
; border_width: defines the width of the window borders in pixels
border_width = 2
; active_border_color: specifies the color of the border for the active (focused) window.
active_border_color = 0x4a4a48
; normal_border_color: specifies the color of the border for inactive (unfocused) windows.
normal_border_color = 0x30302f
; window_gap: sets the gap between windows in pixels.
window_gap = 10
; virtual_desktops: sets the number of virtual desktops available.
virtual_desktops = 6
; focus_follow_pointer: false - the window is focused on click, true - the window is focused when the cursor enters it
focus_follow_pointer = true

; Custom Window Rules (Allows you to define specific behaviors for windows based on their window class)

; Syntax: rule = wm_class("window class name"), state(tiled|floated), desktop(1..N)

; Explanation:

; wm_class: The window class name used to identify the window. Use the 'xprop' tool to find the wm_class of a window.
; state: Specifies whether the window should be tiled or floated.
; tiled: The window will be tiled, clearly.
; floated: The window will be floated, clearly.
; desktop: The virtual desktop number where the window should be placed. Use -1 if you do not want to set it to a specific desktop.

; Example: rule = wm_class("emacs"), state(tiled), desktop(-1)
; This rule sets "emacs" window to be tiled and does not change its virtual desktop.

; Key Bindings (For Defining Keyboard Shortcuts To Perform Various Actions)
; The syntax for defining key bindings is: bind = modifier + key -> action/function
; If two modifiers are used, combine them with a pipe (|). For example, alt + shift is written as alt|shift.
; Colon Syntax: Some functions require additional arguments to specify details of the action.
; These arguments are provided using a colon syntax, where the function and its argument are separated by a colon.
; Example: func(switch_desktop:1) means "switch to desktop 1".
; Example: func(resize:grow) means "grow the size of the window".
; Example: func(layout:master) means "toggle master layout".

; Available Modifiers:
; super: The "Windows" key or "Command" key on a Mac.
; alt: The "Alt" key.
; shift: The "Shift" key.
; ctr: The "Control" key.

; - func(...): Calls a predefined function. The following functions are available:

;   kill: Kills the focused window.
;   switch_desktop: Switches to a specified virtual desktop.
;   fullscreen: Toggles fullscreen mode for the focused window.
;   swap: Swaps the focused window with its sibling.
;   transfer_node: Moves the focused window to another virtual desktop.
;   layout: Toggles the specified layout (master, default, stack).
;   traverse: (In stack layout only) Moves focus to the window above or below.
;   flip: Changes the window's orientation; if the window is primarily vertical, it becomes horizontal, and vice versa.
;   cycle_window: Moves focus to the window in the specified direction (up, down, left, right).
;   cycle_desktop: Cycles through the virtual desktops (left, right).
;   resize: Adjusts the size of the focused window (grow, shrink).
;   reload_config: Reloads the configuration file without restarting ZWM.
;   shift_window: Shift floating window position to the specified direction (up, down, left, right).
;   gap_handler: Increase or decrease window gaps (GROW, SHRINK).
;   change_state: Set window state (FLAOTING, TILED).

; USER-DEFINED KEYBINDINGS

; Specific Applications
bind = super + return -> run("alacritty")
bind = super + d -> run(["rofi", "-show", "drun"])
bind = super + x -> run("archlinux-logout")
bind = super + q -> func(kill)

; Switch To Specific Workspaces
bind = super + 1 -> func(switch_desktop:1)
bind = super + 2 -> func(switch_desktop:2)
bind = super + 3 -> func(switch_desktop:3)
bind = super + 4 -> func(switch_desktop:4)
bind = super + 5 -> func(switch_desktop:5)
bind = super + 6 -> func(switch_desktop:6)
bind = super + 7 -> func(switch_desktop:7)

; Toggle Fullscreen
bind = super + f -> func(fullscreen)

; Swap Windows
bind = super + s -> func(swap)

; Cycle Focus Between Windows
bind = super + up -> func(cycle_window:up)
bind = super + right -> func(cycle_window:right)
bind = super + left -> func(cycle_window:left)
bind = super + down -> func(cycle_window:down)

; Switch Window To Workspace
bind = super|shift + 1 -> func(transfer_node:1)
bind = super|shift + 2 -> func(transfer_node:2)
bind = super|shift + 3 -> func(transfer_node:3)
bind = super|shift + 4 -> func(transfer_node:4)
bind = super|shift + 5 -> func(transfer_node:5)
bind = super|shift + 6 -> func(transfer_node:6)

; Reload Configuration File
bind = super|shift + r -> func(reload_config)

